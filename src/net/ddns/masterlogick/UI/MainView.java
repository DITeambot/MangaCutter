package net.ddns.masterlogick.UI;

import net.ddns.masterlogick.core.JobManager;
import net.ddns.masterlogick.core.Main;

import javax.swing.*;
import java.awt.*;

public class MainView {
    JTextField urlTextField;
    JTextField fileTextField;
    JButton browseButton;
    JButton startButton;
    JButton cancelButton;
    JProgressBar progressBar;
    JPanel mainPanel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MainView() {
        cancelButton.addActionListener(e -> new Thread(() -> {
            JobManager.cancel();
            ViewManager.resetProgress();
            startButton.setEnabled(true);
            cancelButton.setEnabled(false);
        }).start());
        startButton.addActionListener(e -> new Thread(() -> {
            startButton.setEnabled(false);
            cancelButton.setEnabled(true);
            JobManager.startJob(urlTextField.getText(), fileTextField.getText());
            ViewManager.showMessage("Скан успешно скачан!");
            ViewManager.resetProgress();
            cancelButton.setEnabled(false);
            startButton.setEnabled(true);
        }).start());
        browseButton.addActionListener(e -> ViewManager.showFileChooser());
    }

    /*public void download(String path) {
        String outputPath = fileTextField.getText();
        if (outputPath.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Не выбран путь на диске для сохранения скана!");
            return;
        }
        if (!new File(outputPath).getName().toLowerCase().endsWith(".png")) {
            outputPath += ".png";
        }


        progressBar.setMaximum(urls.size());
        progressBar.setValue(0);

        BufferedImage[] images = new BufferedImage[urls.size()];
        int width = 0, height = 0;
        for (int i = 0; i < images.length; i++) {
            if (cancel) return;
            try {
                images[i] = IOManager.downloadImage(urls.get(i));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Не удалось скачать фрагмент изображения: " + e.getMessage());
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
            progressBar.setString("Скачивание фрагментов " + (i + 1) + " / " + urls.size());
            progressBar.setValue(i + 1);
            if (images[i] == null) {
                JOptionPane.showMessageDialog(null, "Не удалось скачать фрагмент изображения. Скачивание прервано.");
                progressBar.setEnabled(false);
                progressBar.setMaximum(0);
                progressBar.setValue(0);
                progressBar.setString("");
            }
            width = Math.max(images[i].getWidth(), width);
            height += images[i].getHeight();
            try {
                ImageIO.write(images[i], "PNG", new File("/home/user/Pictures/" + i + ".png"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        BufferedImage dst = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics g = dst.getGraphics();
        int currentHeight = 0;

        progressBar.setValue(0);

        for (int i = 0; i < images.length; i++) {
            if (cancel) return;

            g.drawImage(images[i], 0, currentHeight, null);
            currentHeight += images[i].getHeight();
            progressBar.setString("Склейка " + (i + 1) + " / " + urls.size());
            progressBar.setValue(i + 1);
        }

        progressBar.setString("Сброс на диск");

        try {
            ImageIO.write(dst, "PNG", new File(outputPath));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Не удалось сбросить файл на диск: " + e.getLocalizedMessage());
            e.printStackTrace();
        }

        progressBar.setEnabled(false);
        progressBar.setMaximum(0);
        progressBar.setValue(0);
        progressBar.setString("");

        JOptionPane.showMessageDialog(frame, "Страница успешно скачана!");
    }*/

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(10, 10, 3, 10), -1, -1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Ссылка на главу");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        urlTextField = new JTextField();
        panel1.add(urlTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Например, https://comic.naver.com/webtoon/detail.nhn?titleId=318995no=465weekday=fri  ");
        label2.setDisplayedMnemonic('W');
        label2.setDisplayedMnemonicIndex(73);
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(3, 10, 3, 10), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Сохранить в:");
        panel2.add(label3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileTextField = new JTextField();
        panel2.add(fileTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        browseButton = new JButton();
        browseButton.setText("Обзор");
        panel2.add(browseButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(3, 10, 10, 10), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel3, gbc);
        startButton = new JButton();
        startButton.setText("Старт");
        panel3.add(startButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Отмена");
        panel3.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel3.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(3, 10, 3, 10), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel4, gbc);
        progressBar = new JProgressBar();
        progressBar.setEnabled(false);
        progressBar.setString("");
        progressBar.setStringPainted(true);
        panel4.add(progressBar, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
